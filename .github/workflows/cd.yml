name: CD
on:
  repository_dispatch:
    types: [Model is registered]
    
jobs:
  deploy_to_qa:
    runs-on: ubuntu-latest

    
    # TODO: refactor into two jobs
    #       build image and deploy the inference
    steps:    
    - name: Copy Repository Contents
      uses: actions/checkout@master
    
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install Python dependencies
      run: |
        pip3 install requests adal --upgrade


    - name: Handle Deploy Event
      id: deh
      run: |
        python3 event_dispatcher.py --event_type "deploy"        
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      working-directory: .github/events

    - name: Get Access Token
      run: |
        export MLFLOW_TOKEN=$(python code/utils/azure_auth.py \
                              --tenant ${{ secrets.tenant }} \
                              --service_principal ${{ secrets.SERVICE_PRINCIPAL }} \
                              --sp_secret ${{ secrets.SERVICE_PRINCIPAL_PWD }} 2>&1 >/dev/null)                            
        echo "::set-env name=MLFLOW_TOKEN::$MLFLOW_TOKEN"

    - name: Download model
      run: |
        cd $GITHUB_WORKSPACE/code/seldon        
        mlflow_run_id=$(curl -H "Authorization: Bearer $MLFLOW_TOKEN " -d '{"experiment_ids":['$MLFLOW_EXPERIMENT'],"filter":"tags.external_run_id='\'''$RUN_ID''\''"}' ${{ secrets.KFP_DSHB }}/mlflow/api/2.0/preview/mlflow/runs/search | jq -r '.runs[0].info.run_id')     
        echo $mlflow_run_id
        curl -H "Authorization: Bearer $MLFLOW_TOKEN " -L '${{ secrets.KFP_DSHB }}/mlflow/get-artifact?path=model/data/model.h5&run_uuid='$mlflow_run_id > model.h5
        echo "::set-env name=mlflow_run_id::$mlflow_run_id"
      env:
        RUN_ID: ${{ steps.deh.outputs.RUN_ID }}   
        MLFLOW_EXPERIMENT: ${{ secrets.MLFLOW_EXPERIMENT }}       

    - name: Build Scoring image
      run: |
        cd $GITHUB_WORKSPACE/code/seldon
        ls -ltr
        echo ${{ secrets.DOCKER_PWD}} | docker login --username ${{ secrets.DOCKER_USER }} --password-stdin
        docker build $GITHUB_WORKSPACE/code/seldon -t ${{ secrets.MODEL_IMAGE_NAME }}:$RUN_ID
        docker push ${{ secrets.MODEL_IMAGE_NAME }}:$RUN_ID
        echo $RUN_ID
      env:
        RUN_ID: ${{ steps.deh.outputs.RUN_ID }}  
        
    - name: Promote model to Staging
      run: |
        body=$(curl -H "Authorization: Bearer $MLFLOW_TOKEN " ${{ secrets.KFP_DSHB }}/mlflow/ajax-api/2.0/preview/mlflow/model-versions/search?filter=run_id%3D%27${mlflow_run_id}%27 | jq '.model_versions[0] | {name: .name, version: .version, stage: $stage}' --arg stage Staging --compact-output)
        curl -H "Authorization: Bearer $MLFLOW_TOKEN " -d $body ${{ secrets.KFP_DSHB }}/mlflow/ajax-api/2.0/preview/mlflow/model-versions/transition-stage

    - name: Deploy Model to SeldonCore
      uses: WyriHaximus/github-action-helm3@master
      with:      
        exec: helm upgrade ${{ secrets.DEPLOYMENT_NAME }} $GITHUB_WORKSPACE/code/seldon/chart --install --set=image.tag=$RUN_ID
        kubeconfig: ${{ secrets.KUBECONFIG }}        
      env:
        RUN_ID: ${{ steps.deh.outputs.RUN_ID }}        

  deploy_to_uat:
    runs-on: ubuntu-latest
    needs: deploy_to_qa
    if: false
    
    steps:    
    - name: Copy Repository Contents
      uses: actions/checkout@master

    
    - name: Deploy Model to KFServing
      uses: WyriHaximus/github-action-helm3@master
      with:      
        exec: helm upgrade ${{ secrets.DEPLOYMENT_NAME }} $GITHUB_WORKSPACE/code/kfserving/custom/chart --install --set=image.tag=$RUN_ID
        kubeconfig: ${{ secrets.KUBECONFIG }}        
      env:
        RUN_ID: ${{ steps.deh.outputs.RUN_ID }}        

  deploy_to_prod:
    runs-on: ubuntu-latest
    needs: deploy_to_uat

    steps:    
    - name: Copy Repository Contents
      uses: actions/checkout@master

    - name: Install Python dependencies
      run: |
        pip3 install requests --upgrade

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.SERVICE_PRINCIPAL }}", "clientSecret":"${{ secrets.SERVICE_PRINCIPAL_PWD }}", "subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}", "tenantId":"${{ secrets.TENANT }}"}' 
    - name: Deploy
      uses: azure/CLI@v1
      with:
        inlineScript: |          
          cd $GITHUB_WORKSPACE/code/deploy
          ./deploy.sh -m ${{ secrets.MODEL_NAME }} \
                      -u ${{ secrets.SUBSCRIPTION_ID }} \
                      -r ${{ secrets.RESOURCE_GROUP }} \
                      -w ${{ secrets.AML_WORKSPACE }} \
                      -x ${{ steps.deh.outputs.RUN_ID }} \
                      -d ${{ secrets.DEPLOYMENT_NAME }}


      
